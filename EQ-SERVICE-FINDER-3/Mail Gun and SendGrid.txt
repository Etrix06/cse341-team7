Abraham,
These are the changes from mailgun to sendgrid that I will make when I work on the project.
I will change them back to original once I am done for the day. So you can ignore them on your side.


In auth.js controller- 
comment in line 4
comment out lines 13 - 18

Replace postReset with this: lines 200 - 249

exports.postReset = (req, res, next) => {
  crypto.randomBytes(32, (err, buffer) => {
    if (err) {
      console.log(err);
      return res.redirect('/reset');
    }
    const token = buffer.toString('hex');
    User.findOne( { email: req.body.email})
    .then(user => {
      if (!user) {
        req.flash('error', 'No account with that email found.');
        return res.redirect('/reset');
      }
      user.resetToken = token;
      user.resetTokenExpiration = Date.now() + 3600000;
      return user.save();
    })
    .then(result => {
      res.redirect('/');
      console.log('Email sent.');      
      transporter.sendMail({
        to: req.body.email,
        from: 'alc18005@byui.edu',
        subject: 'Password reset.',
        html: `
          <p>You requested a password reset from Alcala Shop</p>
          <p>Click this <a href="https://cse341-team7-project2.herokuapp.com/reset/${token}">link</a> to set a new password.</p>
        `         
        //   needs to be infront of the /reset above in order to work with academind
        //http://localhost:3000
      });
    })
    .catch(err => {
      const error = new Error(err);
      error.httpStatusCode = 500;
      return next(error);
    });
  });
};




To change back


In auth. js controller-
comment out line 4
comment in lines 13 - 18

change back postReset with code below: lines 200 - 238

exports.postReset = (req, res, next) => {
  crypto.randomBytes(32, (err, buffer) => {
    if (err) {
      console.log(err);
      return res.redirect('/reset');
    }
    const token = buffer.toString('hex');
    User.findOne({
        email: req.body.email
      })
      .then(user => {
        if (!user) {
          req.flash('error', 'No account with that email found.');
          return res.redirect('/reset');
        }
        user.resetToken = token;
        user.resetTokenExpiration = Date.now() + 3600000;
        return user.save();
      })
      .then(result => {
        res.redirect('/');
        mailgun.messages().send({
            to: req.body.email,
            from: 'Flower House <esp19005@byui.edu>',
            subject: 'Password Reset for Flower House',
            html: `
            <p>You requested a password reset</p>
            <p>Click this <a href="https://cse341-project-master.herokuapp.com/reset/${token}">link</a> to set a new password.</p>
          `
            //<p>Click this <a href="http://localhost:5000/reset/${token}">link</a> to set a new password.</p>
          },
          function (error, body) {
            console.log(body);
          });
        // transporter.sendMail({
        //   to: req.body.email,
        //   from: 'shop@node-complete.com',
        //   subject: 'Password reset',
        //   html: `
        //     <p>You requested a password reset</p>
        //     <p>Click this <a href="http://localhost:3000/reset/${token}">link</a> to set a new password.</p>
        //   `
        // });
      })
      .catch(err => {
        const error = new Error(err);
        error.httpStatusCode = 500;
        return next(error);      });
  });
};
